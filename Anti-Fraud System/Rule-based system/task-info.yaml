type: edu
files:
- name: src/antifraud/AntiFraudApplication.java
  visible: true
  text: |-
    package antifraud;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class AntiFraudApplication {
        public static void main(String[] args) {
            SpringApplication.run(AntiFraudApplication.class, args);
        }
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    server.error.include-message=always
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
    spring.jackson.serialization.INDENT_OUTPUT=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    plugins {
        id 'java'
        id 'org.springframework.boot' version '2.3.1.RELEASE'
        id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    }


    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'com.h2database:h2'
        implementation group: 'org.hibernate', name: 'hibernate-validator', version: '6.1.0.Final'
    }
  learner_created: false
- name: test/AntiFraudTest.java
  visible: false
  text: |-
    import antifraud.AntiFraudApplication;
    import com.google.gson.JsonArray;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.ArrayList;
    import java.util.List;

    import static org.hyperskill.hstest.common.JsonUtils.getJson;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    class TestHint {
        private final String apiPath;
        private final String requestBody;
        private final String message;

        public TestHint(String apiPath, String requestBody, String message) {
            this.apiPath = apiPath;
            this.requestBody = requestBody;
            this.message = message;
        }

        @Override
        public String toString() {
            return "Test case\n" +
                    "Testing api: '" + apiPath + '\'' + "\n" +
                    (requestBody.length() > 0 ? "request: '" + requestBody + '\'' + "\n" : "") +
                    "Expectations: '" + message + "'" + "\n" +
                    "-----";
        }
    }

    public class AntiFraudTest extends SpringTest {

        private final String transactionApi = "/api/antifraud/transaction";
        private final String userApi = "/api/auth/user";
        private final String userListApi = "/api/auth/list";
        private final String lockApi = "/api/auth/access";
        private final String roleApi = "/api/auth/role";
        private final String ipApi = "/api/antifraud/suspicious-ip";
        private final String cardApi = "/api/antifraud/stolencard";
        List<Integer> userIdList = new ArrayList<>();

        private final String administrator = "{\n" +
                "   \"name\": \"administrator\",\n" +
                "   \"username\": \"administrator\",\n" +
                "   \"password\": \"oMoa4VvqnLxW\"\n" +
                "}";

        private final String johndoe1 = "{\n" +
                "   \"name\": \"John Doe 1\",\n" +
                "   \"username\": \"johndoe1\",\n" +
                "   \"password\": \"oMoa3VvqnLxW\"\n" +
                "}";

        private final String johndoe2 = "{\n" +
                "   \"name\": \"John Doe 2\",\n" +
                "   \"username\": \"johndoe2\",\n" +
                "   \"password\": \"oMoa5VvqnLxW\"\n" +
                "}";

        private final String johndoe3 = "{\n" +
                "   \"name\": \"John Doe 3\",\n" +
                "   \"username\": \"johndoe3\",\n" +
                "   \"password\": \"oMoa6VvqnLxW\"\n" +
                "}";

        private final String wronguser1 = "{\n" +
                "   \"name\": \"John Doe 1\",\n" +
                "   \"password\": \"oa3VvqnLxW\"\n" +
                "}";

        private final String wronguser2 = "{\n" +
                "   \"name\": \"John Doe 2\",\n" +
                "   \"username\": \"johndoe1\"\n" +
                "}";

        private final String wronguserCred1 = "{\n" +
                "   \"name\": \"John Doe 1\",\n" +
                "   \"username\": \"johndoe1\",\n" +
                "   \"password\": \"oa3VvqnLxW\"\n" +
                "}";

        private final String wronguserCred2 = "{\n" +
                "   \"name\": \"John Do\",\n" +
                "   \"username\": \"johndo\",\n" +
                "   \"password\": \"oMoa3VvqnLxW\"\n" +
                "}";

        private final String listAnswer1 = "[ {\n" +
                "  \"id\" : 1,\n" +
                "  \"name\" : \"administrator\",\n" +
                "  \"username\" : \"administrator\",\n" +
                "  \"role\" : \"ADMINISTRATOR\"\n" +
                "}, {\n" +
                "  \"id\" : 2,\n" +
                "  \"name\" : \"John Doe 1\",\n" +
                "  \"username\" : \"johndoe1\",\n" +
                "  \"role\" : \"MERCHANT\"\n" +
                "}, {\n" +
                "  \"id\" : 4,\n" +
                "  \"name\" : \"John Doe 2\",\n" +
                "  \"username\" : \"johndoe2\",\n" +
                "  \"role\" : \"MERCHANT\"\n" +
                "} ]";

        private final String listAnswer2 = "[ {\n" +
                "  \"id\" : 1,\n" +
                "  \"name\" : \"administrator\",\n" +
                "  \"username\" : \"administrator\",\n" +
                "  \"role\" : \"ADMINISTRATOR\"\n" +
                "}, {\n" +
                "  \"id\" : 4,\n" +
                "  \"name\" : \"John Doe 2\",\n" +
                "  \"username\" : \"johndoe2\",\n" +
                "  \"role\" : \"MERCHANT\"\n" +
                "} ]";

        private final String listAnswer3 = "[ {\n" +
                "  \"id\" : 1,\n" +
                "  \"name\" : \"administrator\",\n" +
                "  \"username\" : \"administrator\",\n" +
                "  \"role\" : \"ADMINISTRATOR\"\n" +
                "}, {\n" +
                "  \"id\" : 4,\n" +
                "  \"name\" : \"John Doe 2\",\n" +
                "  \"username\" : \"johndoe2\",\n" +
                "  \"role\" : \"SUPPORT\"\n" +
                "} ]";

        private final String tr1 = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String tr2 = "{\n" +
                "  \"amount\": 199,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:01:00\"\n" +
                "}";

        private final String tr3 = "{\n" +
                "  \"amount\": 200,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:02:00\"\n" +
                "}";

        private final String tr4 = "{\n" +
                "  \"amount\": 201,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:03:00\"\n" +
                "}";

        private final String tr5 = "{\n" +
                "  \"amount\": 1499,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:04:00\"\n" +
                "}";

        private final String tr6 = "{\n" +
                "  \"amount\": 1500,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:05:00\"\n" +
                "}";

        private final String tr7 = "{\n" +
                "  \"amount\": 1501,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:06:00\"\n" +
                "}";

        private final String tr8 = "{\n" +
                "  \"amount\": 2000,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:07:00\"\n" +
                "}";

        private final String trW1 = "{\n" +
                "  \"amount\": -1,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trW2 = "{\n" +
                "  \"amount\": 0,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trW3 = "{\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trW4 = "{\n" +
                "  \"amount\": \" \",\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trW5 = "{\n" +
                "  \"amount\": \"\",\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trW6 = "{ }";

        private final String trP1 = "{\n" +
                "  \"amount\": 1000,\n" +
                "  \"ip\": \"192.168.1.67\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trP2 = "{\n" +
                "  \"amount\": 1000,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000003305160034\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trP3 = "{\n" +
                "  \"amount\": 1000,\n" +
                "  \"ip\": \"192.168.1.67\",\n" +
                "  \"number\": \"4000003305160034\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trP4 = "{\n" +
                "  \"amount\": 2000,\n" +
                "  \"ip\": \"192.168.1.67\",\n" +
                "  \"number\": \"4000003305160034\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        // correlation rules
        private final String corr1IP = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.2\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T17:10:00\"\n" +
                "}";

        private final String corr2IP = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.3\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T17:11:00\"\n" +
                "}";

        private final String corr22IP = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.3\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T17:12:00\"\n" +
                "}";

        private final String corr3IP = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.4\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T17:12:00\"\n" +
                "}";

        private final String corr4IP = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.5\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T17:13:00\"\n" +
                "}";

        private final String corr5IP = "{\n" +
                "  \"amount\": 2000,\n" +
                "  \"ip\": \"192.168.1.5\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T17:14:00\"\n" +
                "}";

        private final String corr1Reg = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.2\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-21T17:10:00\"\n" +
                "}";

        private final String corr2Reg = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.2\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"ECA\",\n" +
                "  \"date\": \"2022-01-21T17:11:00\"\n" +
                "}";

        private final String corr22Reg = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.2\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"ECA\",\n" +
                "  \"date\": \"2022-01-21T17:12:00\"\n" +
                "}";

        private final String corr3Reg = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.2\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"HIC\",\n" +
                "  \"date\": \"2022-01-21T17:13:00\"\n" +
                "}";

        private final String corr4Reg = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.2\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"SSA\",\n" +
                "  \"date\": \"2022-01-21T17:14:00\"\n" +
                "}";

        private final String corr5Reg = "{\n" +
                "  \"amount\": 2000,\n" +
                "  \"ip\": \"192.168.1.2\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"SA\",\n" +
                "  \"date\": \"2022-01-21T17:15:00\"\n" +
                "}";





        private final String ipAnswer = "[ {\n" +
                "  \"id\" : 1,\n" +
                "  \"ip\" : \"192.168.1.66\"\n" +
                "}, {\n" +
                "  \"id\" : 2,\n" +
                "  \"ip\" : \"192.168.1.67\"\n" +
                "} ]";

        private final String ipAnswer2 = "[ {\n" +
                "  \"id\" : 2,\n" +
                "  \"ip\" : \"192.168.1.67\"\n" +
                "} ]";

        private final String ipAnswerEmpty = "[]";

        private final String cardAnswerEmpty = "[]";

        private final String cardAnswer = "[ {\n" +
                "  \"id\" : 1,\n" +
                "  \"number\" : \"4000003305061034\"\n" +
                "}, {\n" +
                "  \"id\" : 2,\n" +
                "  \"number\" : \"4000003305160034\"\n" +
                "} ]";

        private final String cardAnswer2 = "[ {\n" +
                "  \"id\" : 2,\n" +
                "  \"number\" : \"4000003305160034\"\n" +
                "} ]";




        public AntiFraudTest() {
            super(AntiFraudApplication.class, "../service_db.mv.db");
        }

        /**
         * Method for restarting application
         *
         */
        private CheckResult restartApplication() {
            try {
                reloadSpring();
            } catch (Exception ex) {
                throw new UnexpectedError(ex.getMessage());
            }
            return CheckResult.correct();
        }

        private HttpResponse checkResponseStatus(String user, String body,
                                                 int status, String api, String method) {
            HttpRequest request = null;
            switch (method) {
                case "GET":
                    request = get(api);
                    break;
                case "POST":
                    request = post(api, body);
                    break;
                case "PUT":
                    request = put(api, body);
                    break;
                case "DELETE":
                    request = delete(api);
                    break;
            }

            if (user != null) {
                JsonObject userJson = getJson(user).getAsJsonObject();
                String password = userJson.get("password").getAsString();
                String login = userJson.get("username").getAsString().toLowerCase();
                request = request.basicAuth(login, password);
            }
            HttpResponse response = request.send();

            if (response.getStatusCode() != status) {
                throw new WrongAnswer(method + " " + api  + " should respond with "
                        + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                        + "Response body:\n" + response.getContent() + "\n");
            }
            return response;
        }

        public boolean isNumeric(String strNum) {
            if (strNum == null) {
                return false;
            }
            try {
                long l = Long.parseLong(strNum);
            } catch (NumberFormatException nfe) {
                return false;
            }
            return true;
        }

        CheckResult testAddUser(String body, int status, String role, TestHint hint) {

            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(null, body, status, userApi, "POST");


            if (response.getStatusCode() == 201) {

                JsonObject rightResponse = getJson(body).getAsJsonObject();
                rightResponse.remove("password");

                // Check is it JSON in response or something else
                if (!response.getJson().isJsonObject()) {
                    return CheckResult.wrong("Wrong object in response, expected JSON but was \n" +
                            response.getContent().getClass());

                }

                JsonObject jsonResponse = response.getJson().getAsJsonObject();

                // Check if password is presence in response
                if (jsonResponse.get("password") != null) {
                    return CheckResult.wrong("You must remove password from response\n" +
                            jsonResponse);
                }

                if (jsonResponse.get("id") == null) {
                    return CheckResult.wrong("Response must contain user ID\n" +
                            "Received response:\n" +
                            jsonResponse);
                }

                if (jsonResponse.get("id").isJsonNull()) {
                    return CheckResult.wrong("Response must contain user ID\n" +
                            "Received response:\n" +
                            jsonResponse);
                }

                if (userIdList.contains(jsonResponse.get("id").getAsInt())) {
                    return CheckResult.wrong("User ID must be unique!\n" +
                            "Received response:\n" +
                            jsonResponse);
                }

                rightResponse.addProperty("id", jsonResponse.get("id").toString());
                // Check JSON in response
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("id", isInteger())
                                .value("name", rightResponse.get("name").getAsString())
                                .value("role", role)
                                .value("username", isString(s -> s.equalsIgnoreCase(rightResponse.get("username").getAsString())))
                );
                userIdList.add(jsonResponse.get("id").getAsInt());
            }
            return CheckResult.correct();
        }

        CheckResult testDeleteUser(String body, int status, String user, TestHint hint) {

            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(body, "", status, userApi + "/" + user, "DELETE");

            if (response.getStatusCode() == 200) {

                // Check is it JSON in response or something else
                if (!response.getJson().isJsonObject()) {
                    return CheckResult.wrong("Wrong object in response, expected JSON but was \n" +
                            response.getContent().getClass());

                }

                JsonObject jsonResponse = response.getJson().getAsJsonObject();

                // Check JSON in response
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("status", "Deleted successfully!")
                                .value("username", isString(s -> s.equalsIgnoreCase(user)))
                );
            }
            return CheckResult.correct();
        }

        private CheckResult testListUser(String user, int status, String answer,
                                         int position, TestHint hint) {

            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(user, "", status, userListApi, "GET");

            if (response.getStatusCode() == 200) {
                // Check is it array of JSON in response or something else
                if (!response.getJson().isJsonArray()) {
                    return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                            response.getContent().getClass());

                }

                JsonArray correctJson = getJson(answer).getAsJsonArray();
                JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();
                if (responseJson.size() == 0) {
                    throw new WrongAnswer("Empty array in response!");
                }

                if (responseJson.size() != position + 1) {
                    throw new WrongAnswer("Incorrect number - " +  responseJson.size() +
                            " users in response, must be - " + (position + 1));
                }

                // Check JSON in response
                expect(responseJson.get(position).toString()).asJson().check(
                        isObject()
                                .value("id", isInteger())
                                .value("name", correctJson.get(position).getAsJsonObject().get("name").getAsString())
                                .value("role", correctJson.get(position).getAsJsonObject().get("role").getAsString())
                                .value("username",
                                        isString(s -> s.equalsIgnoreCase(correctJson.get(position).getAsJsonObject()
                                                .get("username").getAsString()))
                                ));

            }
            return CheckResult.correct();
        }

        private CheckResult testLock(String user, int status, String operation, String username, TestHint hint) {
            System.out.println(hint.toString());

            JsonObject jsonBody = new JsonObject();
            jsonBody.addProperty("username", username);
            jsonBody.addProperty("operation", operation);

            HttpResponse response = checkResponseStatus(user, jsonBody.toString(), status, lockApi, "PUT");
            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("status", isString(s ->
                                        s.equalsIgnoreCase("User " + username + " " + operation + "ed!"))));
            }
            return CheckResult.correct();
        }

        private CheckResult testRole(String user, int status, String role, String username, TestHint hint) {
            System.out.println(hint.toString());

            JsonObject jsonBody = new JsonObject();
            jsonBody.addProperty("username", username);
            jsonBody.addProperty("role", role);

            HttpResponse response = checkResponseStatus(user, jsonBody.toString(), status, roleApi, "PUT");

            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("id", isInteger())
                                .value("name", isString())
                                .value("role", role)
                                .value("username", isString(s -> s.equalsIgnoreCase(username))));
            }
            return CheckResult.correct();
        }

        private CheckResult testTransaction(String user, String api, String method, int status, String body,
                                            String answer, String answer2, TestHint hint) {

            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(user, body, status, api, method);

            // Check JSON in response
            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("result", answer)
                                .value("info", answer2));
            }
            return CheckResult.correct();
        }

        private CheckResult testAddIP(String user, int status, String ip, TestHint hint) {
            System.out.println(hint.toString());

            JsonObject jsonBody = new JsonObject();
            jsonBody.addProperty("ip", ip);

            HttpResponse response = checkResponseStatus(user, jsonBody.toString(), status, ipApi, "POST");
            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("id", isInteger())
                                .value("ip", ip));
            }
            return CheckResult.correct();
        }

        private CheckResult testDeleteIP(String user, int status, String ip, TestHint hint) {
            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(user, "", status, ipApi + "/" + ip, "DELETE");
            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("status", "IP " + ip + " successfully removed!"));
            }
            return CheckResult.correct();
        }

        private CheckResult testAddCard(String user, int status, String number, TestHint hint) {
            System.out.println(hint.toString());

            JsonObject jsonBody = new JsonObject();
            jsonBody.addProperty("number", number);

            HttpResponse response = checkResponseStatus(user, jsonBody.toString(), status, cardApi, "POST");
            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("id", isInteger())
                                .value("number", number));
            }
            return CheckResult.correct();
        }

        private CheckResult testDeleteCard(String user, int status, String number, TestHint hint) {
            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(user, "", status, cardApi + "/" + number, "DELETE");
            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("status", "Card " + number + " successfully removed!"));
            }
            return CheckResult.correct();
        }

        private CheckResult testGetIP(String user, int status, String answer, TestHint hint) {
            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(user, "", status, ipApi, "GET");

            if (response.getStatusCode() == 200) {
                if (!response.getJson().isJsonArray()) {
                    return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                            response.getContent().getClass());

                }

                JsonArray correctJson = getJson(answer).getAsJsonArray();
                JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();

                if (responseJson.size() != correctJson.size()) {
                    throw new WrongAnswer("Incorrect number - " +  responseJson.size() +
                            " objects in response, must be - " + correctJson.size());
                }

                // Check JSON in response
                for (int i =0; i < correctJson.size(); i++) {
                    expect(responseJson.get(i).toString()).asJson().check(
                            isObject()
                                    .value("id", isInteger())
                                    .value("ip", correctJson.get(i).getAsJsonObject().get("ip").getAsString())
                    );
                }

            }
            return CheckResult.correct();
        }

        private CheckResult testGetCard(String user, int status, String answer, TestHint hint) {
            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(user, "", status, cardApi, "GET");

            if (response.getStatusCode() == 200) {
                if (!response.getJson().isJsonArray()) {
                    return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                            response.getContent().getClass());

                }

                JsonArray correctJson = getJson(answer).getAsJsonArray();
                JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();

                if (responseJson.size() != correctJson.size()) {
                    throw new WrongAnswer("Incorrect number - " +  responseJson.size() +
                            " objects in response, must be - " + correctJson.size());
                }

                // Check JSON in response
                for (int i =0; i < correctJson.size(); i++) {
                    expect(responseJson.get(i).toString()).asJson().check(
                            isObject()
                                    .value("id", isInteger())
                                    .value("number", correctJson.get(i).getAsJsonObject().get("number").getAsString())
                    );
                }

            }
            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dt = new DynamicTesting[]{
                // Test POST request for signup api
                () -> testAddUser(wronguser1, 400, "MERCHANT",
                        new TestHint(userApi, wronguser1, "In case of wrong data in request, endpoint" +
                                " must respond with BAD REQUEST  status (400).")), // 1

                () -> testAddUser(wronguser2, 400, "MERCHANT",
                        new TestHint(userApi, wronguser2, "In case of wrong data in request, endpoint" +
                                " must respond with BAD REQUEST  status (400).")), // 2

                () -> testAddUser(administrator, 201, "ADMINISTRATOR",
                        new TestHint(userApi, johndoe1, "If user successfully added, endpoint" +
                                " must respond with HTTP CREATED status (201) ")), // 3

                () -> testListUser(administrator, 200,  listAnswer1, 0,
                        new TestHint(userListApi, "", "Endpoint must respond with HTTP OK status (200)" +
                                " and body with array of objects representing the users sorted by ID in ascending order.")), // 4


                () -> testAddUser(johndoe1, 201, "MERCHANT",
                        new TestHint(userApi, johndoe1, "If user successfully added, endpoint" +
                                " must respond with HTTP CREATED status (201) ")), // 5

                () -> testListUser(administrator, 200,  listAnswer1, 1,
                        new TestHint(userListApi, "", "Endpoint must respond with HTTP OK status (200)" +
                                " and body with array of objects representing the users sorted by ID in ascending order.")), // 6

                () -> testListUser(wronguserCred1, 401,  listAnswer1, 0,
                        new TestHint(userListApi, "", "A user with incorrect credentials is not allowed")), // 7

                () -> testListUser(wronguserCred2, 401,  listAnswer1, 0,
                        new TestHint(userListApi, "", "A user with incorrect credentials is not allowed")), // 8

                () -> testTransaction(johndoe1, transactionApi, "POST", 401,tr1,
                        "ALLOWED", "none",
                        new TestHint(transactionApi, "", "Merchant after registration" +
                                " must be LOCKED")), // 9

                () -> testLock(administrator, 200, "UNLOCK", "johndoe1",
                        new TestHint(lockApi, "", "A user johndoe1 must be UNLOCKED")), // 10

                () -> testTransaction(johndoe1, transactionApi, "POST", 200,tr1,
                        "ALLOWED", "none",
                        new TestHint(transactionApi, "", "A user johndoe1 must be UNLOCKED")), // 11

                () -> testTransaction(johndoe1, transactionApi, "POST", 200,tr1,
                        "ALLOWED", "none",
                        new TestHint(transactionApi, "amount = 1", "Result validating of Transaction" +
                                " must be 'ALLOWED'")), // 12

                // Testing persistence
                () -> restartApplication(), // 13

                () -> testListUser(administrator, 200,  listAnswer1, 1,
                        new TestHint(userListApi, "", "After restart user must exist")), // 14

                () -> testAddUser(johndoe1, 409, "MERCHANT",
                        new TestHint(userApi, johndoe1, "In case of an attempt to register an existing user," +
                                " endpoint must respond with HTTP CONFLICT status (409).")), // 15

                () -> testAddUser(johndoe2, 201, "MERCHANT",
                        new TestHint(userApi, johndoe2, "If user successfully added, endpoint" +
                                " must respond with HTTP CREATED status (201) ")), // 16

                () -> testListUser(administrator, 200,  listAnswer1, 2,
                        new TestHint(userListApi, "", "Endpoint must respond with HTTP OK status (200)" +
                                " and body with array of objects representing the users sorted by ID in ascending order.")), // 17

                () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr2,
                        "ALLOWED", "none",
                        new TestHint(transactionApi, "amount = 199", "Result validating of Transaction" +
                                " must be 'ALLOWED'")), // 18

                () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr3,
                        "ALLOWED", "none",
                        new TestHint(transactionApi, "amount = 200", "Result validating of Transaction" +
                                " must be 'ALLOWED'")), // 19

                () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr4,
                        "MANUAL_PROCESSING", "amount",
                        new TestHint(transactionApi, "amount = 201", "Result validating of Transaction" +
                                " must be 'MANUAL_PROCESSING'")), // 20

                () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr5,
                        "MANUAL_PROCESSING", "amount",
                        new TestHint(transactionApi, "amount = 1499", "Result validating of Transaction" +
                                " must be 'MANUAL_PROCESSING'")), // 21

                () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr6,
                        "MANUAL_PROCESSING", "amount",
                        new TestHint(transactionApi, "amount = 1500", "Result validating of Transaction" +
                                " must be 'MANUAL_PROCESSING'")), // 22

                () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr7,
                        "PROHIBITED", "amount",
                        new TestHint(transactionApi, "amount = 1501", "Result validating of Transaction" +
                                " must be 'PROHIBITED'")), // 23

                () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr8,
                        "PROHIBITED", "amount",
                        new TestHint(transactionApi, "amount = 2000", "Result validating of Transaction" +
                                " must be 'PROHIBITED'")), // 24

                () -> testTransaction(johndoe1, transactionApi, "POST", 400, trW1,
                        "Wrong request!", "none",
                        new TestHint(transactionApi, "amount = -1", "Response status" +
                                " must be 'Bad request'")), // 25

                () -> testTransaction(johndoe1, transactionApi, "POST", 400, trW2,
                        "Wrong request!", "none",
                        new TestHint(transactionApi, "amount = 0", "Response status" +
                                " must be 'Bad request'")), // 26

                () -> testTransaction(johndoe1, transactionApi, "POST", 400,trW3,
                        "Wrong request!", "none",
                        new TestHint(transactionApi, "amount = null", "Response status" +
                                " must be 'Bad request'")), // 27

                () -> testTransaction(johndoe1, transactionApi, "POST", 400,trW4,
                        "Wrong request!", "none",
                        new TestHint(transactionApi, "amount = \"\"", "Response status" +
                                " must be 'Bad request'")), // 28

                () -> testTransaction(johndoe1, transactionApi, "POST", 400, trW5,
                        "Wrong request!",  "none",
                        new TestHint(transactionApi, "amount = \" \"", "Response status" +
                                " must be 'Bad request'")), // 29

                () -> testTransaction(johndoe1, transactionApi, "POST", 400, trW6,
                        "Wrong request!",   "none",
                        new TestHint(transactionApi, "empty body", "Response status" +
                                " must be 'Bad request'")), // 30

                () -> testDeleteUser(administrator,404,"somebody",
                        new TestHint(userApi, userApi + "/" + "somebody", "If a user is not found," +
                                " respond with HTTP Not Found status (404).")), // 31

                () -> testDeleteUser(administrator,200,"johndoe1",
                        new TestHint(userApi, userApi + "/" + "johndoe1", "The endpoint must delete" +
                                " the user and respond with HTTP OK status (200)")), // 32

                () -> testListUser(administrator, 200,  listAnswer2, 1,
                        new TestHint(userListApi, "", "User 'johndoe1' must be delete")), // 33

                () -> testRole(administrator,404,"MERCHANT", "johndoe22",
                        new TestHint(roleApi, "", "If a user is not found, endpoint" +
                                " must respond with the HTTP Not Found status (404).")), // 34

                () -> testRole(administrator,400,"USER", "johndoe2",
                        new TestHint(roleApi, "", "If a role is not found, endpoint" +
                                " must respond with the HTTP Bad Request status (400).")), // 35

                () -> testRole(administrator,400,"ADMINISTRATOR", "johndoe2",
                        new TestHint(roleApi, "", "If a role is ADMINISTRATOR, endpoint" +
                                " must respond with the HTTP Bad Request status (400).")), // 36

                () -> testRole(administrator,200,"SUPPORT", "johndoe2",
                        new TestHint(roleApi, "", "If a role successfully changed," +
                                " respond with the HTTP OK status (200)")), // 37

                () -> testRole(administrator,409,"SUPPORT", "johndoe2",
                        new TestHint(roleApi, "", "If a role already assigned to a user," +
                                " endpoint must respond with the HTTP Conflict status (409).")), // 38

                () -> testLock(administrator, 200, "UNLOCK", "johndoe2",
                        new TestHint(lockApi, "", "A user johndoe2 must be UNLOCKED")), // 39

                () -> testListUser(johndoe2, 200,  listAnswer3, 1,
                        new TestHint(userListApi, "", "Role for user 'johndoe2" +
                                "' must be changed to SUPPORT")), // 40

                () -> testTransaction(johndoe2, transactionApi, "POST", 403, tr1,
                        "ALLOWED",   "none",
                        new TestHint(transactionApi, "", "Role MERCHANT must be removed from" +
                                " user johndoe2!")), // 41

                // test Locking
                () -> testAddUser(johndoe3, 201, "MERCHANT",
                        new TestHint(userApi, johndoe3, "If user successfully added, endpoint" +
                                " must respond with HTTP CREATED status (201) ")), // 42

                () -> testTransaction(johndoe3, transactionApi, "POST", 401, tr1,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "MERCHANT user after registration" +
                                " must be LOCKED")), // 43

                () -> testLock(administrator, 200, "UNLOCK", "johndoe3",
                        new TestHint(lockApi, "", "A user johndoe3 must be UNLOCKED")), // 44

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, tr1,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "A user johndoe3 must be UNLOCKED")), // 45

                () -> testLock(administrator, 200, "LOCK", "johndoe3",
                        new TestHint(lockApi, "", "A user johndoe3 must be LOCKED")), // 46

                () -> testTransaction(johndoe3, transactionApi, "POST", 401, tr1,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "A user johndoe3 must be LOCKED")), // 47

                () -> testLock(administrator, 200, "UNLOCK", "johndoe3",
                        new TestHint(lockApi, "", "A user johndoe3 must be UNLOCKED")), // 48

                // test role model
                () -> testTransaction(administrator, transactionApi, "POST", 403, tr1,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to " + transactionApi)), // 49

                () -> testTransaction(johndoe2, transactionApi, "POST", 403, tr1,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "A user with role SUPPORT" +
                                " must not have access to " + transactionApi)), // 50

                () -> testTransaction(null, transactionApi, "POST", 401, tr1,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "A user with role ANONYMOUS" +
                                " must not have access to " + transactionApi)), // 51

                () -> testDeleteUser(null,401,"johndoe1",
                        new TestHint(userApi, "", "A user with role ANONYMOUS" +
                                " must not have access to DELETE " + userApi)), // 52

                () -> testDeleteUser(johndoe2,403,"johndoe1",
                        new TestHint(userApi, "", "A user with role SUPPORT" +
                                " must not have access to DELETE " + userApi)), // 53

                () -> testDeleteUser(johndoe3,403,"johndoe1",
                        new TestHint(userApi, "", "A user with role MERCHANT" +
                                " must not have access to DELETE " + userApi)), // 54

                () -> testListUser(null, 401,  listAnswer3, 1,
                        new TestHint(userListApi, "", "A user with role ANONYMOUS" +
                                " must not have access to " + userListApi)), // 55

                () -> testListUser(johndoe3, 403,  listAnswer3, 1,
                        new TestHint(userListApi, "", "A user with role MERCHANT" +
                                " must not have access to " + userListApi)), // 56

                () -> testGetIP(administrator, 403, ipAnswerEmpty,
                        new TestHint(ipApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to GET " + ipApi)), // 57

                () -> testGetIP(johndoe3, 403, ipAnswerEmpty,
                        new TestHint(ipApi, "", "A user with role MERCHANT" +
                                " must not have access to GET " + ipApi)), // 58

                () -> testAddIP(administrator, 403, "192.168.1.66",
                        new TestHint(ipApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to POST " + ipApi)), // 59

                () -> testAddIP(johndoe3, 403, "192.168.1.66",
                        new TestHint(ipApi, "", "A user with role MERCHANT" +
                                " must not have access to POST " + ipApi)), // 60

                () -> testDeleteIP(administrator, 403, "192.168.1.66",
                        new TestHint(ipApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to DELETE " + ipApi)), // 61

                () -> testDeleteIP(johndoe3, 403, "192.168.1.66",
                        new TestHint(ipApi, "", "A user with role MERCHANT" +
                                " must not have access to DELETE " + ipApi)), // 62

                () -> testGetCard(administrator, 403, cardAnswerEmpty,
                        new TestHint(cardApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to GET " + cardApi)), // 63

                () -> testGetCard(johndoe3, 403, cardAnswerEmpty,
                        new TestHint(cardApi, "", "A user with role MERCHANT" +
                                " must not have access to GET " + cardApi)), // 64

                () -> testAddCard(administrator, 403, "4000003305061034",
                        new TestHint(cardApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to POST " + cardApi)), // 65

                () -> testAddCard(johndoe3, 403, "4000003305061034",
                        new TestHint(cardApi, "", "A user with role MERCHANT" +
                                " must not have access to POST " + cardApi)), // 66

                () -> testDeleteIP(administrator, 403, "4000003305061034",
                        new TestHint(cardApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to DELETE " + cardApi)), // 67

                () -> testDeleteIP(johndoe3, 403, "4000003305061034",
                        new TestHint(cardApi, "", "A user with role MERCHANT" +
                                " must not have access to DELETE " + cardApi)), // 68


                // Test ip black list
                () -> testGetIP(johndoe2, 200, ipAnswerEmpty,
                        new TestHint(ipApi, "", "Endpoint must respond with empty array")), // 69

                () -> testAddIP(johndoe2, 200, "192.168.1.66",
                        new TestHint(ipApi, "", "IP must be added to Black List")), // 70

                () -> testAddIP(johndoe2, 409, "192.168.1.66",
                        new TestHint(ipApi, "", "If IP already in database, " +
                                " endpoint must respond with the HTTP Conflict status (409).")), // 71

                () -> testAddIP(johndoe2, 400, "192.168.351.66",
                        new TestHint(ipApi, "", "If IP doesn't have right format," +
                                " respond with HTTP Bad Request status (400)")), // 72

                () -> testAddIP(johndoe2, 400, "192.168.1.",
                        new TestHint(ipApi, "", "If IP doesn't have right format," +
                                " respond with HTTP Bad Request status (400)")), // 73

                () -> testAddIP(johndoe2, 200, "192.168.1.67",
                        new TestHint(ipApi, "", "IP must be added to Black List")), // 74

                () -> testGetIP(johndoe2, 200, ipAnswer,
                        new TestHint(ipApi, "", "Endpoint must responds with Black List")), // 75

                () -> testDeleteIP(johndoe2, 200, "192.168.1.66",
                        new TestHint(ipApi, "", "IP must be removed from Black List")), // 76

                () -> testDeleteIP(johndoe2, 404, "192.168.1.66",
                        new TestHint(ipApi, "", "If IP not found in database, " +
                                "respond with the HTTP Not Found status (404).")), // 77

                () -> testDeleteIP(johndoe2, 400, "192.168.1.",
                        new TestHint(ipApi, "", "If IP doesn't have right format," +
                                " respond with HTTP Bad Request status (400)")), // 78

                () -> testGetIP(johndoe2, 200, ipAnswer2,
                        new TestHint(ipApi, "", "IP must be removed from Black List")), // 79


                // Test card number black list
                () -> testGetCard(johndoe2, 200, cardAnswerEmpty,
                        new TestHint(cardApi, "", "Endpoint must respond with empty array")), // 80

                () -> testAddCard(johndoe2, 200, "4000003305061034",
                        new TestHint(cardApi, "", "A card must be added to Black List")), // 81

                () -> testAddCard(johndoe2, 409, "4000003305061034",
                        new TestHint(cardApi, "", "If card-number already in database, " +
                                "endpoint must respond with the HTTP Conflict status (409).")), // 82

                () -> testAddCard(johndoe2, 400, "400000330506103",
                        new TestHint(cardApi, "", "If card-number doesn't have right format, " +
                                "endpoint must respond with HTTP Bad Request status (400).")), // 83

                () -> testAddCard(johndoe2, 400, "4000003305061033",
                        new TestHint(cardApi, "", "If checksum of card-number is wrong, " +
                                "endpoint must respond with HTTP Bad Request status (400).")), // 84

                () -> testAddCard(johndoe2, 200, "4000003305160034",
                        new TestHint(cardApi, "", "A card must be added to Black List")), // 85

                () -> testGetCard(johndoe2, 200, cardAnswer,
                        new TestHint(cardApi, "", "Endpoint must responds with Black List")), // 86

                () -> testDeleteCard(johndoe2, 200, "4000003305061034",
                        new TestHint(cardApi, "", "Card must be removed from Black List")), // 87

                () -> testDeleteCard(johndoe2, 404, "4000003305061034",
                        new TestHint(cardApi, "", "If card-number not found in database," +
                                " respond with the HTTP Not Found status (404).")), // 88

                () -> testDeleteCard(johndoe2, 400, "400000330506103",
                        new TestHint(cardApi, "", "If card-number doesn't have right format, " +
                                "endpoint must respond with HTTP Bad Request status (400).")), // 89

                () -> testGetCard(johndoe2, 200, cardAnswer2,
                        new TestHint(cardApi, "", "Card must be removed from Black List")), // 90

                // Test new validating
                () -> testTransaction(johndoe3, transactionApi, "POST", 200, trP1,
                        "PROHIBITED",  "ip",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - suspicious ip reason")), // 91

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, trP2,
                        "PROHIBITED",  "card-number",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - stolen card reason")), // 92

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, trP3,
                        "PROHIBITED",  "card-number, ip",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - stolen card, suspicious ip reasons")), // 93

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, trP4,
                        "PROHIBITED",  "amount, card-number, ip",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - amount, stolen card, suspicious ip reasons")), // 94

                // Test correlation rules
                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr1IP,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "Transaction must be ALLOWED")), // 95

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr2IP,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "Transaction must be ALLOWED")), // 96

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr22IP,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "Transaction must be ALLOWED")), // 97

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr3IP,
                        "MANUAL_PROCESSING",  "ip-correlation",
                        new TestHint(transactionApi, "", "Transaction must be MANUAL_PROCESSING" +
                                " due to - ip correlation rule")), // 98

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr4IP,
                        "PROHIBITED",  "ip-correlation",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - ip correlation rule")), // 99 Thnx to E. Kovko

                () -> testAddCard(johndoe2, 200, "4000008449433403",
                        new TestHint(cardApi, "", "A card must be added to Black List")), // 100

                () -> testAddIP(johndoe2, 200, "192.168.1.5",
                        new TestHint(ipApi, "", "IP must be added to Black List")), // 101

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr5IP,
                        "PROHIBITED",  "amount, card-number, ip, ip-correlation",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - amount, card-number, ip, ip-correlation reasons")), // 102
                //
                () -> testDeleteCard(johndoe2, 200, "4000008449433403",
                        new TestHint(cardApi, "", "Card must be removed from Black List")), // 103

                () -> testDeleteIP(johndoe2, 200, "192.168.1.5",
                        new TestHint(ipApi, "", "IP must be removed from Black List")), // 104


                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr1Reg,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "Transaction must be ALLOWED")), // 105

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr2Reg,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "Transaction must be ALLOWED")), // 106

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr22Reg,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "Transaction must be ALLOWED")), // 107

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr3Reg,
                        "MANUAL_PROCESSING",  "region-correlation",
                        new TestHint(transactionApi, "", "Transaction must be MANUAL_PROCESSING" +
                                " due to - region correlation rule")), // 108

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr4Reg,
                        "PROHIBITED",  "region-correlation",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - region correlation rule")), // 109

                () -> testAddCard(johndoe2, 200, "4000008449433403",
                        new TestHint(cardApi, "", "A card must be added to Black List")), // 110

                () -> testAddIP(johndoe2, 200, "192.168.1.2",
                        new TestHint(ipApi, "", "IP must be added to Black List")), // 111

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr5Reg,
                        "PROHIBITED",  "amount, card-number, ip, region-correlation",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - amount, card-number, ip, region-correlation reasons")), // 112

                () -> testDeleteCard(johndoe2, 200, "4000008449433403",
                        new TestHint(cardApi, "", "Card must be removed from Black List")), // 113

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr3IP,
                        "MANUAL_PROCESSING",  "ip-correlation",
                        new TestHint(transactionApi, "", "Transaction must be MANUAL_PROCESSING" +
                                " due to - ip correlation rule")), // 114

        };
    }
  learner_created: false
- name: src/antifraud/controller/UserController.java
  visible: true
  text: |
    package antifraud.controller;

    import antifraud.domain.request.AccessRequest;
    import antifraud.domain.request.RoleRequest;
    import antifraud.domain.request.UserRequest;
    import antifraud.domain.response.UserResponse;
    import antifraud.service.UserService;
    import java.util.List;
    import javax.annotation.security.RolesAllowed;
    import javax.validation.Valid;
    import lombok.RequiredArgsConstructor;
    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.DeleteMapping;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.PathVariable;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.PutMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RequestMapping;
    import org.springframework.web.bind.annotation.RequestParam;
    import org.springframework.web.bind.annotation.ResponseStatus;
    import org.springframework.web.bind.annotation.RestController;

    @RequiredArgsConstructor
    @RestController
    @RequestMapping("api/auth")
    public class UserController {

      private final UserService userService;

      @PostMapping("user")
      @ResponseStatus(HttpStatus.CREATED)
      public UserResponse registerUser(@Valid @RequestBody UserRequest userRequest) {
        return userService.registerUser(userRequest);
      }

      @RolesAllowed({"ROLE_ADMINISTRATOR", "ROLE_SUPPORT"})
      @GetMapping("list")
      public List<UserResponse> getUsers() {
        return userService.getUsers();
      }

      @RolesAllowed({"ROLE_ADMINISTRATOR"})
      @PutMapping("role")
      public UserResponse updateUser(@Valid @RequestBody RoleRequest roleRequest) {
        return userService.updateUser(roleRequest);
      }

      @RolesAllowed({"ROLE_ADMINISTRATOR"})
      @PutMapping("access")
      public UserResponse accessUser(@Valid @RequestBody AccessRequest accessRequest) {
        return userService.accessUser(accessRequest);
      }

      @RolesAllowed({"ROLE_ADMINISTRATOR"})
      @DeleteMapping("user/{username}")
      public UserResponse removeUser(@PathVariable String username) {
        return userService.deleteUser(username);
      }

      @RolesAllowed({"ROLE_ADMINISTRATOR"})
      @DeleteMapping(value = {"user"})
      public UserResponse removeUserRequestParam(@RequestParam(required = false) String username) {
        return userService.deleteUser(username);
      }
    }
  learner_created: true
- name: src/antifraud/domain/request/TransactionRequest.java
  visible: true
  text: |
    package antifraud.domain.request;

    import javax.validation.constraints.NotBlank;
    import javax.validation.constraints.Pattern;
    import javax.validation.constraints.Positive;
    import lombok.AllArgsConstructor;
    import lombok.Builder;
    import lombok.Data;
    import lombok.NoArgsConstructor;
    import org.hibernate.validator.constraints.CreditCardNumber;

    @Builder
    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    public class TransactionRequest {

      @Positive
      private long amount;

      @NotBlank
      @Pattern(regexp = "^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$")
      String ip;

      @NotBlank
      @CreditCardNumber
      String number;
    }
  learner_created: true
- name: src/antifraud/configuration/WebSecurityConfiguration.java
  visible: true
  text: |
    package antifraud.configuration;

    import antifraud.service.UserDetailsServiceImplementation;
    import lombok.RequiredArgsConstructor;
    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.http.HttpMethod;
    import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
    import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
    import org.springframework.security.config.annotation.web.builders.HttpSecurity;
    import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
    import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
    import org.springframework.security.config.http.SessionCreationPolicy;
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
    import org.springframework.security.crypto.password.NoOpPasswordEncoder;
    import org.springframework.security.crypto.password.PasswordEncoder;

    @EnableWebSecurity
    @Configuration
    @RequiredArgsConstructor
    @EnableGlobalMethodSecurity(jsr250Enabled = true)
    public class WebSecurityConfiguration extends WebSecurityConfigurerAdapter {

      private final UserDetailsServiceImplementation UserDetailsServiceImplementation;

      @Override
      public void configure(HttpSecurity http) throws Exception {
        http.httpBasic()
            //.authenticationEntryPoint(restAuthenticationEntryPoint) // Handles auth error
            .and()
            .csrf().disable().headers().frameOptions().disable() // for Postman, the H2 console
            .and()
            .authorizeRequests() // manage access
            .antMatchers(HttpMethod.POST, "/api/auth/user").permitAll()
            .antMatchers("/actuator/shutdown").permitAll() // needs to run test
            // other matchers
            .and()
            .sessionManagement()
            .sessionCreationPolicy(SessionCreationPolicy.STATELESS); // no session
      }

      @Override
      protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.userDetailsService(UserDetailsServiceImplementation)
            .passwordEncoder(getEncoder());
        auth
            .inMemoryAuthentication() // user store 2
            .withUser("Admin").password("hardcoded").roles("USER")
            .and().passwordEncoder(NoOpPasswordEncoder.getInstance());
      }

      @Bean
      public PasswordEncoder getEncoder() {
        return new BCryptPasswordEncoder();
      }
    }
  learner_created: true
- name: src/antifraud/domain/security/RoleEnum.java
  visible: true
  text: |
    package antifraud.domain.security;

    public enum RoleEnum {

      ADMINISTRATOR,
      MERCHANT,
      SUPPORT;
    }
  learner_created: true
- name: src/antifraud/domain/response/SuspiciousIpResponse.java
  visible: true
  text: |
    package antifraud.domain.response;

    import com.fasterxml.jackson.annotation.JsonInclude;
    import com.fasterxml.jackson.annotation.JsonInclude.Include;
    import lombok.AllArgsConstructor;
    import lombok.Builder;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    @Builder
    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    @JsonInclude(Include.NON_NULL)
    public class SuspiciousIpResponse {

      private Long id;

      private String ip;

      private String status;
    }
  learner_created: true
- name: src/antifraud/domain/response/UserResponse.java
  visible: true
  text: |
    package antifraud.domain.response;

    import antifraud.domain.security.RoleEnum;
    import com.fasterxml.jackson.annotation.JsonInclude;
    import com.fasterxml.jackson.annotation.JsonInclude.Include;
    import lombok.AllArgsConstructor;
    import lombok.Builder;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    @Builder
    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    @JsonInclude(Include.NON_NULL)
    public class UserResponse {

      private Long id;

      private String name;

      private String username;

      private String status;

      private RoleEnum role;
    }
  learner_created: true
- name: src/antifraud/model/User.java
  visible: true
  text: |
    package antifraud.model;

    import antifraud.domain.security.RoleEnum;
    import javax.persistence.Entity;
    import javax.persistence.GeneratedValue;
    import javax.persistence.GenerationType;
    import javax.persistence.Id;
    import lombok.AllArgsConstructor;
    import lombok.Builder;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    @Builder
    @Entity
    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    public class User {

      @Id
      @GeneratedValue(strategy = GenerationType.IDENTITY)
      private Long userId;

      private String name;

      private String username;

      private String password;

      private RoleEnum role;

      private boolean unlock;
    }
  learner_created: true
- name: src/antifraud/domain/antifraud/AccessOperation.java
  visible: true
  text: |
    package antifraud.domain.antifraud;

    public enum AccessOperation {
      LOCK, UNLOCK
    }
  learner_created: true
- name: src/antifraud/repository/UserRepository.java
  visible: true
  text: |
    package antifraud.repository;

    import antifraud.domain.security.RoleEnum;
    import antifraud.model.User;
    import java.util.Optional;
    import org.springframework.data.jpa.repository.JpaRepository;
    import org.springframework.stereotype.Repository;
    import org.springframework.transaction.annotation.Transactional;

    @Repository
    public interface UserRepository extends JpaRepository<User, Long> {

      boolean existsByUsername(String username);

      boolean existsByRole(RoleEnum roleEnum);

      Optional<User> findByUsername(String username);

      @Transactional
      void deleteByUsername(String username);
    }
  learner_created: true
- name: src/antifraud/domain/request/AccessRequest.java
  visible: true
  text: |
    package antifraud.domain.request;

    import antifraud.domain.antifraud.AccessOperation;
    import javax.validation.constraints.NotBlank;
    import lombok.AllArgsConstructor;
    import lombok.Builder;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    @Builder
    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    public class AccessRequest {

      @NotBlank
      private String username;

      private AccessOperation operation;
    }
  learner_created: true
- name: src/antifraud/domain/request/UserRequest.java
  visible: true
  text: |
    package antifraud.domain.request;

    import antifraud.domain.security.RoleEnum;
    import javax.validation.constraints.NotBlank;
    import lombok.AllArgsConstructor;
    import lombok.Builder;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    @Builder
    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    public class UserRequest {

      private String name;

      @NotBlank
      private String username;

      @NotBlank
      private String password;

      private RoleEnum role;
    }
  learner_created: true
- name: src/antifraud/model/StolenCard.java
  visible: true
  text: |
    package antifraud.model;

    import javax.persistence.Entity;
    import javax.persistence.GeneratedValue;
    import javax.persistence.Id;
    import lombok.AllArgsConstructor;
    import lombok.Builder;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    @Builder
    @Entity
    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    public class StolenCard {

      @Id
      @GeneratedValue
      private Long stolenCardId;

      private String number;
    }
  learner_created: true
- name: src/antifraud/domain/request/StolenCardRequest.java
  visible: true
  text: |
    package antifraud.domain.request;

    import javax.validation.constraints.NotBlank;
    import lombok.AllArgsConstructor;
    import lombok.Builder;
    import lombok.Data;
    import lombok.NoArgsConstructor;
    import org.hibernate.validator.constraints.CreditCardNumber;

    @Builder
    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    public class StolenCardRequest {

      @NotBlank
      @CreditCardNumber
      private String number;
    }
  learner_created: true
- name: src/antifraud/domain/request/RoleRequest.java
  visible: true
  text: |
    package antifraud.domain.request;

    import antifraud.domain.security.RoleEnum;
    import javax.validation.constraints.NotBlank;
    import lombok.AllArgsConstructor;
    import lombok.Builder;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    @Builder
    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    public class RoleRequest {

      @NotBlank
      private String username;

      private RoleEnum role;
    }
  learner_created: true
- name: src/antifraud/domain/exception/BadRequestException.java
  visible: true
  text: |
    package antifraud.domain.exception;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public class BadRequestException extends RuntimeException{

      public BadRequestException(String message) {
        super(message);
      }
    }
  learner_created: true
- name: src/antifraud/repository/StolenCardRepository.java
  visible: true
  text: |
    package antifraud.repository;

    import antifraud.model.StolenCard;
    import java.util.Optional;
    import org.springframework.data.jpa.repository.JpaRepository;
    import org.springframework.stereotype.Repository;

    @Repository
    public interface StolenCardRepository extends JpaRepository<StolenCard, Long> {

      boolean existsByNumber(String number);

      Optional<StolenCard> findByNumber(String number);
    }
  learner_created: true
- name: src/antifraud/domain/exception/ConflictException.java
  visible: true
  text: |
    package antifraud.domain.exception;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(HttpStatus.CONFLICT)
    public class ConflictException extends RuntimeException {

      public ConflictException(String message) {
        super(message);
      }
    }
  learner_created: true
- name: src/antifraud/service/UserService.java
  visible: true
  text: |+
    package antifraud.service;

    import antifraud.domain.antifraud.AccessOperation;
    import antifraud.domain.exception.BadRequestException;
    import antifraud.domain.exception.ConflictException;
    import antifraud.domain.exception.NotFoundException;
    import antifraud.domain.request.AccessRequest;
    import antifraud.domain.request.RoleRequest;
    import antifraud.domain.request.UserRequest;
    import antifraud.domain.response.UserResponse;
    import antifraud.domain.security.RoleEnum;
    import antifraud.model.User;
    import antifraud.repository.UserRepository;
    import java.util.List;
    import java.util.Optional;
    import java.util.stream.Collectors;
    import lombok.RequiredArgsConstructor;
    import org.springframework.data.domain.Sort;
    import org.springframework.data.domain.Sort.Direction;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.stereotype.Service;

    @Service
    @RequiredArgsConstructor
    public class UserService {

      private final UserRepository userRepository;

      private final PasswordEncoder passwordEncoder;

      public UserResponse registerUser(UserRequest userRequest) {
        boolean existsByRole = userRepository.existsByRole(RoleEnum.ADMINISTRATOR);
        RoleEnum roleEnum = existsByRole
            ? RoleEnum.MERCHANT : RoleEnum.ADMINISTRATOR;
        boolean unlock = !existsByRole;

        boolean existsByUsername = userRepository.existsByUsername(userRequest.getUsername());
        if (existsByUsername) {
          throw new ConflictException("This is username is used by another user.");
        }

        User user = User.builder()
            .name(userRequest.getName())
            .username(userRequest.getUsername())
            .password(passwordEncoder.encode(userRequest.getPassword()))
            .role(roleEnum)
            .unlock(unlock)
            .build();
        user = userRepository.save(user);

        return UserResponse.builder()
            .id(user.getUserId())
            .username(user.getUsername())
            .name(user.getName())
            .role(roleEnum)
            .build();
      }

      public List<UserResponse> getUsers() {
        return userRepository.findAll(Sort.by(Direction.ASC, "userId")).stream()
            .map(user -> UserResponse.builder()
                .id(user.getUserId())
                .username(user.getUsername())
                .name(user.getName())
                .role(user.getRole())
                .build()).collect(Collectors.toList());
      }

      public UserResponse updateUser(RoleRequest roleRequest) {
        Optional<User> currentUser = Optional.ofNullable(
            userRepository.findByUsername(roleRequest.getUsername())
                .orElseThrow(() -> new NotFoundException("User not found.")));

        if (roleRequest.getRole().equals(RoleEnum.ADMINISTRATOR)) {
          throw new BadRequestException("Bad request");
        }

        if (roleRequest.getRole().equals(currentUser.get().getRole())) {
          throw new ConflictException("Conflict Exception");
        }
        User user = currentUser.get();
        user.setRole(roleRequest.getRole());

        user = userRepository.save(user);

        return UserResponse.builder()
            .id(user.getUserId())
            .username(user.getUsername())
            .name(user.getName())
            .role(user.getRole())
            .build();
      }

      public UserResponse accessUser(AccessRequest accessRequest) {
        Optional<User> currentUser = Optional.ofNullable(
            userRepository.findByUsername(accessRequest.getUsername())
                .orElseThrow(() -> new NotFoundException("User not found.")));

        User user = currentUser.get();
        if (user.getRole().equals(RoleEnum.ADMINISTRATOR)) {
          throw new BadRequestException("Bad request");
        }
        user.setUnlock(accessRequest.getOperation().equals(AccessOperation.UNLOCK));
        userRepository.save(user);
        return UserResponse.builder()
            .status(String.format("User %s %s!", user.getUsername(), user.isUnlock() ? "unlocked" : "locked"))
            .build();
      }

      public UserResponse deleteUser(String username) {
        boolean existsByUsername = userRepository.existsByUsername(username);
        if (!existsByUsername) {
          throw new NotFoundException("This is username has not been found.");
        }

        userRepository.deleteByUsername(username);
        return UserResponse.builder()
            .username(username)
            .status("Deleted successfully!").build();
      }
    }

  learner_created: true
- name: src/antifraud/model/SuspiciousIp.java
  visible: true
  text: |
    package antifraud.model;

    import javax.persistence.Entity;
    import javax.persistence.GeneratedValue;
    import javax.persistence.Id;
    import lombok.AllArgsConstructor;
    import lombok.Builder;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    @Builder
    @Entity
    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    public class SuspiciousIp {

      @Id
      @GeneratedValue
      private Long suspiciousIpId;

      private String ip;
    }
  learner_created: true
- name: src/antifraud/repository/SuspiciousIpRepository.java
  visible: true
  text: |
    package antifraud.repository;

    import antifraud.model.SuspiciousIp;
    import java.util.Optional;
    import org.springframework.data.jpa.repository.JpaRepository;
    import org.springframework.stereotype.Repository;

    @Repository
    public interface SuspiciousIpRepository extends JpaRepository<SuspiciousIp, Long> {

       boolean existsByIp(String ip);

       Optional<SuspiciousIp> findByIp(String ip);
    }
  learner_created: true
- name: src/antifraud/service/AntiFraudService.java
  visible: true
  text: |
    package antifraud.service;

    import antifraud.domain.antifraud.TransactionPolicy;
    import antifraud.domain.exception.ConflictException;
    import antifraud.domain.exception.NotFoundException;
    import antifraud.domain.request.StolenCardRequest;
    import antifraud.domain.request.SuspiciousIpRequest;
    import antifraud.domain.request.TransactionRequest;
    import antifraud.domain.response.StolenCardResponse;
    import antifraud.domain.response.SuspiciousIpResponse;
    import antifraud.domain.response.TransactionResponse;
    import antifraud.model.StolenCard;
    import antifraud.model.SuspiciousIp;
    import antifraud.repository.StolenCardRepository;
    import antifraud.repository.SuspiciousIpRepository;
    import java.util.ArrayList;
    import java.util.Collections;
    import java.util.List;
    import java.util.Optional;
    import java.util.stream.Collectors;
    import lombok.RequiredArgsConstructor;
    import lombok.extern.slf4j.Slf4j;
    import org.springframework.data.domain.Sort;
    import org.springframework.data.domain.Sort.Direction;
    import org.springframework.stereotype.Service;

    @Slf4j
    @Service
    @RequiredArgsConstructor
    public class AntiFraudService {

      private final SuspiciousIpRepository suspiciousIpRepository;

      private final StolenCardRepository stolenCardRepository;

      public TransactionResponse processTransaction(TransactionRequest transactionRequest) {
        List<String> reasons = new ArrayList<>();
        long amount = transactionRequest.getAmount();
        TransactionPolicy transactionPolicy;

        TransactionResponse.TransactionResponseBuilder transactionResponseBuilder = TransactionResponse.builder();
        if (amount <= 200) {
          log.info("Processing the transaction with amount less than or equal 200 request : {}",
              transactionRequest);
          transactionResponseBuilder.result(TransactionPolicy.ALLOWED.toString());
          transactionPolicy = TransactionPolicy.ALLOWED;
          reasons.add("none");
        } else if (amount <= 1500) {
          transactionResponseBuilder.result(TransactionPolicy.MANUAL_PROCESSING.toString());
          reasons.add("amount");
          transactionPolicy = TransactionPolicy.MANUAL_PROCESSING;
        } else {
          transactionResponseBuilder.result(TransactionPolicy.PROHIBITED.toString());
          transactionPolicy = TransactionPolicy.PROHIBITED;
          reasons.add("amount");
        }

        boolean existsByIp = suspiciousIpRepository.existsByIp(transactionRequest.getIp());
        boolean existsByNumber = stolenCardRepository.existsByNumber(transactionRequest.getNumber());
        if (existsByNumber) {
          transactionResponseBuilder.result(TransactionPolicy.PROHIBITED.toString());
          if(transactionPolicy.equals(TransactionPolicy.MANUAL_PROCESSING)){
            reasons.remove("amount");
          }
          transactionPolicy = TransactionPolicy.PROHIBITED;
          if (reasons.contains("none")) {
            reasons.clear();
          }
          reasons.add("card-number");
        }

        if (existsByIp) {
          transactionResponseBuilder.result(TransactionPolicy.PROHIBITED.toString());
          if(transactionPolicy.equals(TransactionPolicy.MANUAL_PROCESSING)){
            reasons.remove("amount");
          }
          if (reasons.contains("none")) {
            reasons.clear();
          }
          reasons.add("ip");
        }

        Collections.sort(reasons);
        String info = String.join(", ", reasons);
        return transactionResponseBuilder.info(info).build();
      }

      public SuspiciousIpResponse createSuspiciousIp(SuspiciousIpRequest suspiciousIpRequest) {
        log.info("Starting the process to create the suspicious ip with the request : {}",
            suspiciousIpRequest);
        boolean existsByIp = suspiciousIpRepository.existsByIp(suspiciousIpRequest.getIp());
        if (existsByIp) {
          log.error("This ip is already in database");
          throw new ConflictException("This ip is already in database");
        }
        SuspiciousIp suspiciousIp = SuspiciousIp.builder()
            .ip(suspiciousIpRequest.getIp()).build();
        suspiciousIpRepository.save(suspiciousIp);
        log.error("Saving the suspicious ip successfully {}", suspiciousIp);
        return SuspiciousIpResponse.builder().id(suspiciousIp.getSuspiciousIpId())
            .ip(suspiciousIp.getIp()).build();
      }

      public List<SuspiciousIpResponse> getSuspiciousIps() {
        log.info("Retrieving the list of suspicious ips");
        return suspiciousIpRepository.findAll(Sort.by(Direction.ASC, "suspiciousIpId")).stream()
            .map(suspiciousIp ->
                SuspiciousIpResponse.builder().id(suspiciousIp.getSuspiciousIpId())
                    .ip(suspiciousIp.getIp()).build()
            ).collect(Collectors.toList());
      }

      public SuspiciousIpResponse removeSuspiciousIp(String ip) {
        Optional<SuspiciousIp> suspiciousIpOptional = suspiciousIpRepository.findByIp(ip);
        if (suspiciousIpOptional.isEmpty()) {
          throw new NotFoundException("The IP is not found in the database.");
        }
        Long id = suspiciousIpOptional.get().getSuspiciousIpId();
        suspiciousIpRepository.deleteById(id);
        String message = String.format("IP %s successfully removed!", ip);
        return SuspiciousIpResponse.builder().status(message).build();
      }

      public StolenCardResponse createStolenCard(StolenCardRequest stolenCardRequest) {
        log.info("Starting the process to create the stolen card with the request : {}",
            stolenCardRequest);
        boolean existsByNumber = stolenCardRepository.existsByNumber(stolenCardRequest.getNumber());
        if (existsByNumber) {
          log.error("This number is already in database");
          throw new ConflictException("This number is already in database");
        }
        StolenCard stolenCard = StolenCard.builder()
            .number(stolenCardRequest.getNumber())
            .build();
        stolenCardRepository.save(stolenCard);
        log.error("Saving the stolen card successfully {}", stolenCard);
        return StolenCardResponse.builder()
            .id(stolenCard.getStolenCardId())
            .number(stolenCard.getNumber())
            .build();
      }

      public List<StolenCardResponse> getStolenCards() {
        log.info("Retrieving the list of suspicious ips");
        return stolenCardRepository.findAll(Sort.by(Direction.ASC, "stolenCardId")).stream()
            .map(stolenCard ->
                StolenCardResponse.builder()
                    .id(stolenCard.getStolenCardId())
                    .number(stolenCard.getNumber())
                    .build())
            .collect(Collectors.toList());
      }

      public StolenCardResponse removeStolenCard(String number) {
        Optional<StolenCard> stolenCardOptional = stolenCardRepository.findByNumber(number);
        if (stolenCardOptional.isEmpty()) {
          throw new NotFoundException("The card number is not found in the database.");
        }
        Long id = stolenCardOptional.get().getStolenCardId();
        stolenCardRepository.deleteById(id);
        String message = String.format("Card %s successfully removed!", number);
        return StolenCardResponse.builder().status(message).build();
      }
    }
  learner_created: true
- name: src/antifraud/service/UserDetailsServiceImplementation.java
  visible: true
  text: |
    package antifraud.service;

    import antifraud.domain.security.UserDetailsImplementation;
    import antifraud.model.User;
    import antifraud.repository.UserRepository;
    import java.util.Collection;
    import java.util.List;
    import java.util.Optional;
    import lombok.RequiredArgsConstructor;
    import org.springframework.security.core.GrantedAuthority;
    import org.springframework.security.core.authority.SimpleGrantedAuthority;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.security.core.userdetails.UserDetailsService;
    import org.springframework.security.core.userdetails.UsernameNotFoundException;
    import org.springframework.stereotype.Service;

    @Service
    @RequiredArgsConstructor
    public class UserDetailsServiceImplementation implements UserDetailsService {


      private final UserRepository userRepository;

      @Override
      public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        Optional<User> user = userRepository.findByUsername(username);
        if(user.isEmpty()){
          throw new UsernameNotFoundException("Not found");
        }
        Collection<? extends GrantedAuthority> authorities =
            List.of(new SimpleGrantedAuthority("ROLE_"+user.get().getRole()));
        return UserDetailsImplementation.builder()
            .username(user.get().getUsername())
            .unlock(user.get().isUnlock())
            .authorities(authorities)
            .password(user.get().getPassword()).build();
      }
    }
  learner_created: true
- name: src/antifraud/domain/antifraud/TransactionPolicy.java
  visible: true
  text: |
    package antifraud.domain.antifraud;

    public enum TransactionPolicy {

      ALLOWED, MANUAL_PROCESSING, PROHIBITED;
    }
  learner_created: true
- name: src/antifraud/domain/request/SuspiciousIpRequest.java
  visible: true
  text: |
    package antifraud.domain.request;

    import javax.validation.constraints.NotBlank;
    import javax.validation.constraints.Pattern;
    import lombok.AllArgsConstructor;
    import lombok.Builder;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    @Builder
    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    public class SuspiciousIpRequest {

      @NotBlank
      @Pattern(regexp = "^((0|1\\d?\\d?|2[0-4]?\\d?|25[0-5]?|[3-9]\\d?)\\.){3}(0|1\\d?\\d?|2[0-4]?\\d?|25[0-5]?|[3-9]\\d?)$")
      private String ip;
    }
  learner_created: true
- name: src/antifraud/domain/security/UserDetailsImplementation.java
  visible: true
  text: |
    package antifraud.domain.security;

    import java.util.Collection;
    import lombok.AllArgsConstructor;
    import lombok.Builder;
    import lombok.NoArgsConstructor;
    import org.springframework.security.core.GrantedAuthority;
    import org.springframework.security.core.userdetails.UserDetails;

    @Builder
    @NoArgsConstructor
    @AllArgsConstructor
    public class UserDetailsImplementation implements UserDetails {

      private String username;
      private String password;
      private Collection<? extends GrantedAuthority> authorities;
      private boolean unlock;

      @Override
      public Collection<? extends GrantedAuthority> getAuthorities() {
        return this.authorities;
      }

      @Override
      public String getPassword() {
        return password;
      }

      @Override
      public String getUsername() {
        return username;
      }

      @Override
      public boolean isAccountNonExpired() {
        return true;
      }

      @Override
      public boolean isAccountNonLocked() {
        return unlock;
      }

      @Override
      public boolean isCredentialsNonExpired() {
        return true;
      }

      @Override
      public boolean isEnabled() {
        return true;
      }
    }
  learner_created: true
- name: src/antifraud/domain/response/StolenCardResponse.java
  visible: true
  text: |
    package antifraud.domain.response;

    import com.fasterxml.jackson.annotation.JsonInclude;
    import com.fasterxml.jackson.annotation.JsonInclude.Include;
    import lombok.AllArgsConstructor;
    import lombok.Builder;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    @Builder
    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    @JsonInclude(Include.NON_NULL)
    public class StolenCardResponse {

      private Long id;

      private String number;

      private String status;
    }
  learner_created: true
- name: src/antifraud/controller/AntiFraudController.java
  visible: true
  text: |
    package antifraud.controller;

    import antifraud.domain.request.StolenCardRequest;
    import antifraud.domain.request.SuspiciousIpRequest;
    import antifraud.domain.request.TransactionRequest;
    import antifraud.domain.response.StolenCardResponse;
    import antifraud.domain.response.SuspiciousIpResponse;
    import antifraud.domain.response.TransactionResponse;
    import antifraud.service.AntiFraudService;
    import java.util.List;
    import javax.annotation.security.RolesAllowed;
    import javax.validation.ConstraintViolationException;
    import javax.validation.Valid;
    import javax.validation.constraints.Pattern;
    import lombok.RequiredArgsConstructor;
    import org.hibernate.validator.constraints.CreditCardNumber;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.validation.annotation.Validated;
    import org.springframework.web.bind.annotation.DeleteMapping;
    import org.springframework.web.bind.annotation.ExceptionHandler;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.PathVariable;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RequestMapping;
    import org.springframework.web.bind.annotation.ResponseStatus;
    import org.springframework.web.bind.annotation.RestController;

    @RequiredArgsConstructor
    @RestController
    @Validated
    @RequestMapping("api/antifraud")
    public class AntiFraudController {

      private final AntiFraudService antiFraudService;

      @RolesAllowed({"ROLE_MERCHANT"})
      @PostMapping("transaction")
      public TransactionResponse postTransaction(
          @Valid @RequestBody TransactionRequest transactionRequest) {
        return antiFraudService.processTransaction(transactionRequest);
      }

      @RolesAllowed({"ROLE_SUPPORT"})
      @PostMapping("suspicious-ip")
      public SuspiciousIpResponse createSuspiciousIp(
          @Valid @RequestBody SuspiciousIpRequest suspiciousIpRequest) {
        return antiFraudService.createSuspiciousIp(suspiciousIpRequest);
      }

      @RolesAllowed({"ROLE_SUPPORT"})
      @GetMapping("suspicious-ip")
      public List<SuspiciousIpResponse> getSuspiciousIps() {
        return antiFraudService.getSuspiciousIps();
      }

      @RolesAllowed({"ROLE_SUPPORT"})
      @DeleteMapping("suspicious-ip/{ip}")
      public SuspiciousIpResponse removeSuspiciousIp(@PathVariable(name = "ip")
          @Pattern(regexp = "^((0|1\\d?\\d?|2[0-4]?\\d?|25[0-5]?|[3-9]\\d?)\\.){3}(0|1\\d?\\d?|2[0-4]?\\d?|25[0-5]?|[3-9]\\d?)$") String ip) {
        return antiFraudService.removeSuspiciousIp(ip);
      }

      @RolesAllowed({"ROLE_SUPPORT"})
      @PostMapping("stolencard")
      public StolenCardResponse stolenCardResponse(
          @Valid @RequestBody StolenCardRequest stolenCardRequest) {
        return antiFraudService.createStolenCard(stolenCardRequest);
      }

      @RolesAllowed({"ROLE_SUPPORT"})
      @GetMapping("stolencard")
      public List<StolenCardResponse> getStolenCards() {
        return antiFraudService.getStolenCards();
      }

      @RolesAllowed({"ROLE_SUPPORT"})
      @DeleteMapping("stolencard/{number}")
      public StolenCardResponse removeStolenCard(@PathVariable(name = "number")
          @CreditCardNumber String number) {
        return antiFraudService.removeStolenCard(number);
      }

      @ExceptionHandler(ConstraintViolationException.class)
      @ResponseStatus(HttpStatus.BAD_REQUEST)
      ResponseEntity<String> handleConstraintViolationException(ConstraintViolationException e) {
        return new ResponseEntity<>("not valid due to validation error: " + e.getMessage(), HttpStatus.BAD_REQUEST);
      }
    }
  learner_created: true
- name: src/antifraud/domain/exception/NotFoundException.java
  visible: true
  text: |+
    package antifraud.domain.exception;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(HttpStatus.NOT_FOUND)
    public class NotFoundException extends RuntimeException {

      public NotFoundException(String message) {
        super(message);
      }
    }

  learner_created: true
- name: src/antifraud/domain/response/TransactionResponse.java
  visible: true
  text: |
    package antifraud.domain.response;

    import lombok.AllArgsConstructor;
    import lombok.Builder;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    @Builder
    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    public class TransactionResponse {

      private String result;

      private String info;
    }
  learner_created: true
- name: src/antifraud/domain/antifraud/TransactionInfo.java
  visible: true
  learner_created: true
- name: src/antifraud/model/Transaction.java
  visible: true
  learner_created: true
- name: src/resources/data.sql
  visible: true
  learner_created: true
- name: src/antifraud/model/Region.java
  visible: true
  learner_created: true
- name: src/antifraud/service/transaction/TransactionVerificationService.java
  visible: true
  learner_created: true
- name: src/antifraud/repository/TransactionRepository.java
  visible: true
  learner_created: true
- name: src/antifraud/repository/RegionRepository.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/18071#comment
status: Solved
feedback:
  message: Congratulations!
  time: Tue, 25 Apr 2023 00:31:42 UTC
record: 5
